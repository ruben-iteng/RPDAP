#pragma experiment("BRIDGE_CONNECT")
#pragma experiment("FOR_LOOP")
#pragma experiment("TRAITS")
import ElectricPower
import ElectricLogic
import Capacitor
import has_single_electric_reference_shared

from "parts/Wuxi_I_core_Elec_AiP74LVC1T45GB236_TR/Wuxi_I_core_Elec_AiP74LVC1T45GB236_TR.ato" import Wuxi_I_core_Elec_AiP74LVC1T45GB236_TR_package


module Wuxi_I_core_Elec_AiP74LVC1T45GB236_TR:
    """
    Single bit, dual supply transceivers with 3-state outputs that
    enable bidirectional level translation.
    """
    package = new Wuxi_I_core_Elec_AiP74LVC1T45GB236_TR_package

    # --- External interfaces ---
    power_a = new ElectricPower
    power_a.required = True
    power_b = new ElectricPower
    power_b.required = True
    a = new ElectricLogic
    a.required = True
    b = new ElectricLogic
    b.required = True
    dir = new ElectricLogic
    """High = A to B, Low = B to A"""
    # dir.required = True

    # # --- Internal connections ---
    # for logic in [a, dir]:
    #     logic.reference_shim ~ power_a
    # b.reference_shim ~ power_b
    # trait has_single_electric_reference_shared<gnd_only=True>

    # --- Constraints ---
    assert power_a.voltage within 1.2V to 5.5V
    assert power_b.voltage within 1.2V to 5.5V

    # --- Package connections ---
    power_a.hv ~ package.VCCA
    power_b.hv ~ package.VCCB
    power_a.lv ~ package.GND
    a.line ~ package.A
    b.line ~ package.B
    dir.line ~ package.DIR

    # --- Internal connections ---
    for logic in [a, dir]:
        logic.reference_shim ~ power_a
    b.reference_shim ~ power_b
    trait has_single_electric_reference_shared<gnd_only=True>

    # --- Components ---
    caps = new Capacitor[2]
    for c in caps:
        c.capacitance = 100nF +/- 20%
        c.package = "0402"

    power_a.hv ~> caps[0] ~> power_a.lv
    power_b.hv ~> caps[1] ~> power_b.lv
